<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="do">

<!-- 공연정보 입력 -->
<insert id="performInsert" parameterType="perform.PerformDTO">
	insert into perform_info values(
	default, #{perform_title}, #{perform_date}, #{location}, #{artist_main},
	#{running_time}, #{intermission}, #{main_img}, #{sub_img}, #{intro_text},
  #{perform_host}, #{limit_age}, 0, #{open_date},
	#{price_R}, #{price_S}, #{price_A}, #{price_B}, #{perform_day}, #{open_day}, #{price_All} )
</insert>

<!-- 공연번호(ID) 불러오기 (for 공연 좌석정보) -->
<select id="getFinalPerformNum" resultType="int">
	select max(perform_num) from perform_info
</select>

<!-- 공연 좌석정보 입력 -->
<insert id="performSeatInsert" parameterType="perform.PerformSeatDTO">
	insert into perform_seat_info values(#{perform_num}, #{perform_location}, #{booked_seat},
	#{remain_R}, #{remain_S}, #{remain_A}, #{remain_B}, #{remain_all} )
</insert>



<!-- 공연 List 출력 -->
<select id="getPerformList" resultType="perform.PerformDTO" parameterType="int">
	select perform_num, perform_title, perform_date, perform_day, location, artist_main, main_img, open_date,
	price_R, price_S, price_A, price_B, price_All from perform_info order by perform_date asc limit #{startrow}, 15
</select>

<!-- 공연 List 출력 (날짜 선택 시) -->
<select id="getPerformListByDate" resultType="perform.PerformDTO" parameterType="vo.PerformSearchInfo">
	select perform_num, perform_title, perform_date, perform_day, location, artist_main, main_img, open_date,
	price_R, price_S, price_A, price_B, price_All from perform_info where date(perform_date) between #{startDate} and #{endDate} order by perform_date asc limit #{startrow}, 15
</select>

<!-- 공연 List 출력 (날짜 + 장소 선택 시) -->
<select id="getPerformListByLocation" resultType="perform.PerformDTO" parameterType="vo.PerformSearchInfo">
	select perform_num, perform_title, perform_date, perform_day, location, artist_main, main_img, open_date,
	price_R, price_S, price_A, price_B, price_All from perform_info where location like '%${location}%' and date(perform_date) between #{startDate} and #{endDate} order by perform_date asc limit #{startrow}, 15
</select>


<!-- 공연 List 출력 (관리자용) -->
<select id="getPerformListManager" resultType="perform.PerformDTO">
	select perform_num, perform_title, perform_date, location from perform_info order by perform_date asc
</select>

<!-- 공연 상세페이지 출력 -->
<select id="getPerformDetail" resultType="perform.PerformDTO" parameterType="int">
	select * from perform_info where perform_num = #{perform_num}
</select>

<!-- (공연 상세페이지) '좌석정보' 출력 -->
<select id="getPerformSeatInfo" resultType="perform.PerformSeatDTO" parameterType="int">
	select * from perform_seat_info where perform_num = #{perform_num}
</select>


<!-- 공연정보 삭제 -->
<delete id="performDelete" parameterType="int">
	delete from perform_info where perform_num = #{perform_num}
</delete>

<!-- 공연정보 수정 -->
<update id="performUpdate" parameterType="perform.PerformDTO">
	update perform_info set perform_title=#{perform_title}, perform_date=#{perform_date}, location=#{location},
	artist_main=#{artist_main}, running_time=#{running_time}, intermission=#{intermission}, main_img=#{main_img},
	sub_img=#{sub_img}, intro_text=#{intro_text}, perform_host=#{perform_host},
	limit_age=#{limit_age}, open_date=#{open_date}, price_R=#{price_R}, price_S=#{price_S}, price_A=#{price_A},
	price_B=#{price_B}, perform_day=#{perform_day}, open_day=#{open_day}, price_All=#{price_All}
	where perform_num = #{perform_num}
</update>

<!-- 공연 갯수 파악 (paging처리용) -->
<select id="performListCount" resultType="int">
	select count(*) from perform_info
</select>

<!-- 공연 갯수 파악 (paging처리용 / 날짜 선택 시) -->
<select id="performListCountByDate" resultType="int" parameterType="vo.PerformSearchInfo">
	select count(*) from perform_info where date(perform_date) between #{startDate} and #{endDate}
</select>

<!-- 공연 갯수 파악 (paging처리용 / 날짜 + 장소 선택 시) -->
<select id="performListCountByLocation" resultType="int" parameterType="vo.PerformSearchInfo">
	select count(*) from perform_info where location like '%${location}%' and date(perform_date) between #{startDate} and #{endDate}
</select>

<!-- 멤버-공연 좋아요 정보 추가 -->
<insert id="performLikeInsert" parameterType="vo.MemberLikeInfo">
	insert into member_perform_like values(#{member_id}, #{perform_num})
</insert>

<!-- 공연정보 좋아요 갯수 증가 -->
<update id="performLikeAdd" parameterType="int">
	update perform_info set like_num = like_num+1 where perform_num = #{perform_num}
</update>

<!-- 멤버-공연 좋아요 정보 제거 -->
<delete id="performLikeDelete" parameterType="vo.MemberLikeInfo">
	delete from member_perform_like where member_id = #{member_id} and perform_num = #{perform_num}
</delete>

<!-- 공연정보 좋아요 갯수 감소 -->
<update id="performLikeReduce" parameterType="int">
	update perform_info set like_num = like_num-1 where perform_num = #{perform_num}
</update>

<!-- (공연 Detail페이지) 회원이 누른 좋아요 정보 확인용 -->
<select id="performLikeInfo" parameterType="vo.MemberLikeInfo" resultType="int">
	select perform_num from member_perform_like where member_id = #{member_id} and perform_num = #{perform_num}
</select>


<!-- (티켓예매) 정보 수정 전, 좌석정보 뽑아오기  -->
<select id="selectPerformSeat" parameterType="int" resultType="perform.PerformSeatDTO">
	select * from perform_seat_info where perform_num = ${perform_num}
</select>

<!-- (티켓예매) 예약된 정보로 수정 -->
<update id="performBookUpdate" parameterType="perform.PerformSeatDTO">
	update perform_seat_info set booked_seat = concat(booked_seat, #{booked_seat}, ',') , remain_R = #{remain_R}, remain_S = #{remain_S},
	remain_A = #{remain_A}, remain_B = #{remain_B}, remain_all = #{remain_all}
	where perform_num = #{perform_num}
</update>

<!-- (티켓예매) 예약정보 입력 -->
<insert id="performBookInsert" parameterType="perform.PerformBookDTO">
	insert into reservation_info values(#{member_id}, #{member_tel}, #{member_email}, #{perform_num}, #{seat} )
</insert>

<!-- (for 티켓예매) 회원정보 꺼내오기 -->
<select id="selectBookMemberInfo" parameterType="String" resultType="user.UserDTO">
	select birth, tel, email from member_info where id = #{memberId}
</select>


</mapper>